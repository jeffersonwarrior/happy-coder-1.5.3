name: 🤖 Distributed Build with Workers

on:
  push:
    branches: [ main, dev ]
  workflow_dispatch:
    inputs:
      use_workers:
        description: 'Use distributed workers for build'
        required: false
        default: 'true'
        type: boolean
      worker_count:
        description: 'Number of parallel workers'
        required: false
        default: '4'
        type: number

# Allow parallel execution across different build types
concurrency:
  group: worker-builds-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  WORKER_COUNT: ${{ github.event.inputs.worker_count || '4' }}

jobs:
  # ========================
  # WORKER COORDINATOR
  # ========================
  coordinator:
    name: 🎯 Build Coordinator
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      matrix_web: ${{ steps.setup.outputs.matrix_web }}
      matrix_mobile: ${{ steps.setup.outputs.matrix_mobile }}
      matrix_test: ${{ steps.setup.outputs.matrix_test }}
      should_use_workers: ${{ steps.setup.outputs.should_use_workers }}
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🎯 Setup build matrix
        id: setup
        run: |
          echo "Setting up distributed build matrix..."
          
          # Determine if we should use workers
          USE_WORKERS="${{ github.event.inputs.use_workers || 'true' }}"
          echo "should_use_workers=${USE_WORKERS}" >> $GITHUB_OUTPUT
          
          # Web build matrix (different optimizations)
          echo 'matrix_web={
            "include": [
              {"config": "development", "optimize": false, "bundle": "modern"},
              {"config": "production", "optimize": true, "bundle": "modern"},
              {"config": "production", "optimize": true, "bundle": "legacy"}
            ]
          }' >> $GITHUB_OUTPUT
          
          # Mobile build matrix (platforms and variants)
          echo 'matrix_mobile={
            "include": [
              {"platform": "ios", "variant": "development", "architecture": "x64"},
              {"platform": "ios", "variant": "production", "architecture": "x64"},
              {"platform": "android", "variant": "development", "architecture": "x64"},
              {"platform": "android", "variant": "production", "architecture": "x64"}
            ]
          }' >> $GITHUB_OUTPUT
          
          # Test matrix (different test suites for parallel execution)
          echo 'matrix_test={
            "include": [
              {"suite": "unit", "pattern": "**/*.test.ts", "timeout": 10},
              {"suite": "integration", "pattern": "**/*.integration.test.ts", "timeout": 20},
              {"suite": "stress", "pattern": "**/*.stress.test.ts", "timeout": 30},
              {"suite": "e2e", "pattern": "**/*.e2e.test.ts", "timeout": 40}
            ]
          }' >> $GITHUB_OUTPUT
          
          echo "Build matrix configured for ${{ env.WORKER_COUNT }} workers"

  # ========================
  # PARALLEL WEB BUILDS
  # ========================
  web-build-workers:
    name: 🌐 Web Build Worker (${{ matrix.config }}-${{ matrix.bundle }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: coordinator
    if: needs.coordinator.outputs.should_use_workers == 'true'
    
    strategy:
      matrix: ${{ fromJson(needs.coordinator.outputs.matrix_web) }}
      fail-fast: false
      max-parallel: 3
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: 🔧 Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          
      - name: 📚 Install dependencies
        run: yarn install --frozen-lockfile --prefer-offline
        
      - name: 🌐 Build Web - ${{ matrix.config }} (${{ matrix.bundle }})
        run: |
          echo "🏗️ Building web version: ${{ matrix.config }} with ${{ matrix.bundle }} bundle"
          
          # Set environment based on config
          if [ "${{ matrix.config }}" = "production" ]; then
            export NODE_ENV=production
            export EXPO_PUBLIC_ENV=production
          else
            export NODE_ENV=development
            export EXPO_PUBLIC_ENV=development
          fi
          
          # Build with appropriate settings
          if [ "${{ matrix.optimize }}" = "true" ]; then
            yarn expo export --platform web --output-dir dist-${{ matrix.config }}-${{ matrix.bundle }} --minify
          else
            yarn expo export --platform web --output-dir dist-${{ matrix.config }}-${{ matrix.bundle }}
          fi
          
          # Bundle analysis
          echo "## 📊 Bundle Analysis (${{ matrix.config }}-${{ matrix.bundle }})" >> $GITHUB_STEP_SUMMARY
          du -sh dist-${{ matrix.config }}-${{ matrix.bundle }}/* | head -10 >> $GITHUB_STEP_SUMMARY
          
      - name: 📦 Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build-${{ matrix.config }}-${{ matrix.bundle }}
          path: dist-${{ matrix.config }}-${{ matrix.bundle }}/
          retention-days: 7

  # ========================
  # PARALLEL MOBILE BUILDS
  # ======================== 
  mobile-build-workers:
    name: 📱 Mobile Build Worker (${{ matrix.platform }}-${{ matrix.variant }})
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: coordinator
    if: needs.coordinator.outputs.should_use_workers == 'true'
    
    strategy:
      matrix: ${{ fromJson(needs.coordinator.outputs.matrix_mobile) }}
      fail-fast: false
      max-parallel: 2
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: 🔧 Setup Expo CLI
        uses: expo/expo-github-action@v8
        with:
          expo-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
          
      - name: 📚 Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: 📱 Build ${{ matrix.platform }} - ${{ matrix.variant }}
        run: |
          echo "🏗️ Building ${{ matrix.platform }} version: ${{ matrix.variant }}"
          
          # Configure build environment
          if [ "${{ matrix.variant }}" = "production" ]; then
            export NODE_ENV=production
            export EXPO_PUBLIC_ENV=production
          fi
          
          # Platform-specific builds
          if [ "${{ matrix.platform }}" = "ios" ]; then
            yarn expo export --platform ios --output-dir build-ios-${{ matrix.variant }}
          else
            yarn expo export --platform android --output-dir build-android-${{ matrix.variant }}
          fi
          
          echo "✅ ${{ matrix.platform }} build completed" >> $GITHUB_STEP_SUMMARY
          
      - name: 📦 Upload mobile build
        uses: actions/upload-artifact@v4
        with:
          name: mobile-build-${{ matrix.platform }}-${{ matrix.variant }}
          path: build-${{ matrix.platform }}-${{ matrix.variant }}/
          retention-days: 7

  # ========================
  # PARALLEL TEST EXECUTION
  # ========================
  test-workers:
    name: 🧪 Test Worker (${{ matrix.suite }})
    runs-on: ubuntu-latest
    timeout-minutes: ${{ matrix.timeout }}
    needs: coordinator
    if: needs.coordinator.outputs.should_use_workers == 'true'
    
    strategy:
      matrix: ${{ fromJson(needs.coordinator.outputs.matrix_test) }}
      fail-fast: false
      max-parallel: 4
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: 📚 Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: 🧪 Run ${{ matrix.suite }} Tests
        run: |
          echo "🧪 Running ${{ matrix.suite }} test suite..."
          
          # Run specific test pattern
          yarn test ${{ matrix.pattern }} --run --reporter=json --outputFile=${{ matrix.suite }}-results.json
          yarn test ${{ matrix.pattern }} --run --reporter=verbose
          
          echo "✅ ${{ matrix.suite }} tests completed" >> $GITHUB_STEP_SUMMARY
        env:
          CI: true
          
      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.suite }}
          path: ${{ matrix.suite }}-results.json
          retention-days: 30

  # ========================
  # RESULTS AGGREGATION
  # ========================
  aggregate-results:
    name: 📊 Aggregate Build Results
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [web-build-workers, mobile-build-workers, test-workers]
    if: always()
    
    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: 📊 Generate Aggregate Report
        run: |
          echo "## 🎯 Distributed Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count builds
          web_builds=$(find . -name "web-build-*" -type d | wc -l)
          mobile_builds=$(find . -name "mobile-build-*" -type d | wc -l)
          test_suites=$(find . -name "*-results.json" | wc -l)
          
          echo "### 📈 Build Statistics:" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 Web Builds: ${web_builds}" >> $GITHUB_STEP_SUMMARY
          echo "- 📱 Mobile Builds: ${mobile_builds}" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Test Suites: ${test_suites}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Analyze build sizes
          echo "### 📊 Build Size Analysis:" >> $GITHUB_STEP_SUMMARY
          for dir in web-build-*/; do
            if [ -d "$dir" ]; then
              size=$(du -sh "$dir" | cut -f1)
              echo "- ${dir%/}: ${size}" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Worker Performance:" >> $GITHUB_STEP_SUMMARY
          echo "- ⚡ Parallel execution completed" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 All worker tasks finished successfully" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 Build artifacts ready for deployment" >> $GITHUB_STEP_SUMMARY
          
      - name: 🎉 Success Summary
        run: |
          echo "🎉 Distributed build completed successfully!"
          echo "All workers have finished their tasks and artifacts are ready."

  # ========================
  # FALLBACK SEQUENTIAL BUILD
  # ========================
  sequential-build:
    name: 🔄 Sequential Build (Fallback)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: coordinator
    if: needs.coordinator.outputs.should_use_workers == 'false'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js & Dependencies
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          
      - name: 📚 Install dependencies
        run: yarn install --frozen-lockfile
        
      - name: 🏗️ Sequential Build Process
        run: |
          echo "🔄 Running sequential build (workers disabled)"
          
          # Build web version
          yarn expo export --platform web --output-dir dist
          
          # Run tests
          yarn test --run
          
          echo "✅ Sequential build completed" >> $GITHUB_STEP_SUMMARY