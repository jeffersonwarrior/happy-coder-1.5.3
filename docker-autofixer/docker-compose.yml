services:
  # Main AutoFixer service
  autofixer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: github-autofixer
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - CLAUDE_API_KEY=85c99bec0fa64a0d8a4a01463868667a.RsDzW0iuxtgvYqd2
      - EXA_API_KEY=b65999c0-db14-4241-9a53-f58b4656ae4b
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - SONAR_HOST_URL=http://sonarqube:9000
    volumes:
      - ./workspace:/workspace
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker in Docker
    depends_on:
      - sonarqube
      - redis
    networks:
      - autofixer-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # SonarQube for code analysis
  sonarqube:
    image: sonarqube:latest
    container_name: autofixer-sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonarqube
      - SONAR_JDBC_USERNAME=sonarqube
      - SONAR_JDBC_PASSWORD=sonarqube_password
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    depends_on:
      - postgres
    networks:
      - autofixer-network
    restart: unless-stopped

  # PostgreSQL for SonarQube
  postgres:
    image: postgres:15-alpine
    container_name: autofixer-postgres
    environment:
      - POSTGRES_USER=sonarqube
      - POSTGRES_PASSWORD=sonarqube_password
      - POSTGRES_DB=sonarqube
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - autofixer-network
    restart: unless-stopped

  # Redis for caching and job queuing
  redis:
    image: redis:7-alpine
    container_name: autofixer-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    networks:
      - autofixer-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: autofixer-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - autofixer
    networks:
      - autofixer-network
    restart: unless-stopped

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: autofixer-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - autofixer-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: autofixer-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - autofixer-network
    restart: unless-stopped

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  autofixer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16